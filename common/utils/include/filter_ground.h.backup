#ifndef _FILTER_GROUND_H
#define _FILTER_GROUND_H
#include <ros/ros.h>

#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_types.h>
#include <pcl/conversions.h>
#include <pcl_ros/transforms.h>

#include <pcl/filters/extract_indices.h>

#include <sensor_msgs/PointCloud2.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf/transform_listener.h>
#include <omp.h>


namespace FILTER_GROUND{
class RayGroundFilter
{
using Point = pcl::PointXYZ;

private:
  ros::NodeHandle nh;
  geometry_msgs::PoseStamped current_pose;

  std::string lidar_frame;
  std::string lidar_topic;
  std::string ground_topic;
  std::string no_ground_topic;

  int SENSOR_MODEL;
  double SENSOR_HEIGHT;
  // double default_cluster_height;
  // double default_plane_radius;

  double RADIAL_DIVIDER_ANGLE;  // default: 0.18

  double local_max_slope_;     // degree default: 8 //max slope of the ground between points, degree
  double general_max_slope_;  // degree  default: 5 //max slope of the ground in entire point cloud, degree

  double CLIP_HEIGHT;  //截取掉高于雷达自身xx米的点
  double minX;
  double maxX;
  double minY;
  double maxY;

  double MIN_DISTANCE; // default: 2.4

  double concentric_divider_distance_;  // default: 0.01 //0.1 meters default
  double min_height_threshold_;  // default: 0.05

  double reclass_distance_threshold_;  // default: 0.2
  
  // DEBUG
  bool debug_pub_all;
  std::string debug_map_topic;

  bool is_clip_height;
  
  struct PointXYZIRTColor
  {
    Point point;

    float radius; //cylindric coords on XY Plane
    float theta;  //angle deg on XY plane

    size_t radial_div;     //index of the radial divsion to which this point belongs to
    size_t concentric_div; //index of the concentric division to which this points belongs to

    size_t original_index; //index of this point in the source pointcloud
  };
  typedef std::vector<PointXYZIRTColor> PointCloudXYZIRTColor;

  size_t radial_dividers_num_;
  size_t concentric_dividers_num_;


  void clip_above(double clip_height, const pcl::PointCloud<Point>::Ptr in, const pcl::PointCloud<Point>::Ptr out,const pcl::PointIndices::Ptr up_indices);

  void remove_close_pt(double min_distance, const pcl::PointCloud<Point>::Ptr in, const pcl::PointCloud<Point>::Ptr out,const pcl::PointIndices::Ptr target_indices);

  void XYZI_to_RTZColor(const pcl::PointCloud<Point>::Ptr in_cloud,
                        PointCloudXYZIRTColor &out_organized_points,
                        std::vector<pcl::PointIndices> &out_radial_divided_indices,
                        std::vector<PointCloudXYZIRTColor> &out_radial_ordered_clouds);

  void classify_pc(std::vector<PointCloudXYZIRTColor> &in_radial_ordered_clouds,
                   pcl::PointIndices &out_ground_indices,
                   pcl::PointIndices &out_no_ground_indices);


public:
  RayGroundFilter();
  ~RayGroundFilter();

  bool init_param();
  void convert(const pcl::PointCloud<Point>::Ptr &current_pc_ptr,
                const pcl::PointCloud<Point>::Ptr &no_ground_cloud_ptr);
  void setIfClipHeight(bool ifClipHeight);

};
}// end namespace


#endif